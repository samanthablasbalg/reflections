What happens when you initialize a repository? Why do you need to do it?

	When you initialize a repository, it adds the hidden folders to the directory
	so git can recognize it. It does not initialize a commit. You need to do it
	so git can start keeping track of the files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a place where you put files that you are ready to commit
	together before actually committing them. The value it adds is that it allows
	you to pick which files from your working directory you want to commit, 
	rather than commiting them all each time.

How can you use the staging area to make sure you have one commit per logical
change?

	You can use the staging area to only hold the files related to the change you
	are making, rather than committing all files at once.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches keep your history organized when you want to try out a new feature
	but don't want to modify the master branch. I'm guessing it also will be
	useful for collaboration.

How do the diagrams help you visualize the branch structure?

	Diagrams help visualize the branch structure by showing where each branch split
	off from the master and for showing the reachability of one commit compared
	to another.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together combines the latest versions of files on both
	branches so that features that were developed on one branch can be integrated
	into another branch. It is represented in the diagram with two parents to show
	both sets of commits in git log.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

	The pros of automatic merging are that in most cases, merges are simple and it 
	is convenient to have the software able to handle it for you. However, 
	automatic merges are not always perfect so it can lead to mistakes. Manual
	merges, while more time consuming, ensure that the right code gets merged.
