When would you want to use a remote repository rather than keeping all your work
local?

    You want to use remote repositories so that if anything happens to your local
    computer, the work will not be lost. It also will enable collaboration with 
    other people.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    If more than one person is working on a file at the same time, and Git tried
    to automatically sync everything, there could be merge conflicts. This way,
    by forcing it to be done manually, if there are merge conflicts, they can 
    be resolved individually when a push/pull is intentionally started.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks are copies of repositories made only on github. The advantage of using
    a fork instead of a clone in this case is that it links back to the original
    repository. A clone is a copy of an entire repository. It can be two copies
    stored locally, or a local copy cloned from a remote copy. You use cloning
    to get a copy of a remote repository onto your local machine so you can work 
    on it. A branch is a split within the same repository which is used for 
    feature development or other purposes.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    The benefit of having a copy of the last known state of the remote stored
    locally is that it allows you to work offline until the next time you 
    need to push/pull your work.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    I would probably use something like swapping emails or a shared site. There
    would literally be nothing easier and everything would be harder.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    You want to use a separate branch when your code changes might be risky or if
    you are collaborating and you only want to merge into master after someone
    has reviewed your code even if your work isn't risky.
